<?php

/**
 * @file
 * Contains style_options_num2assoc module.
 */

/**
 * Implements hook_install().
 */
function style_options_num2assoc_install() {
  style_options_num2assoc_execute();
}

/**
 * Update style options from numeric to associative where applicable.
 *
 * Requires that updated keys in style definitions have matching indexes and
 * identical number of items in the options array from previous numeric version.
 *
 * # CORRECT example:
 *
 * # From:
 * - foo
 * - bar
 * - baz
 *
 * # To:
 * first: 'foo'
 * second: 'bar'
 * third: 'baz'
 *
 * # INCORRECT example:
 *
 * # From:
 *
 * - for
 * - bar
 * - baz
 *
 * # To:
 * first: foo
 * third: baz
 *
 */
function style_options_num2assoc_execute() {
  $definitions =  \Drupal::service('style_options.discovery')->getOptionDefinitions();
  $definitions = array_filter($definitions, function($def) {
    if (!empty($def['options']) && is_array($def['options'])) {
      foreach (array_keys($def['options']) as $key) {
        if (!is_numeric($key)) {
          return TRUE;
        }
      }
    }
  });
  $definitions = array_map(function($def) {
    return [$def['plugin'] => array_keys($def['options'])];
  }, $definitions);
  foreach ($definitions as $id => $definition) {
    $key_map = reset($definition);
    // Load all paragraphs that contain the text $id in the text blog behavior field.
    $query = \Drupal::entityQuery('paragraph')
      ->condition('behavior_settings', '%"' . $id . '"%', 'LIKE');
    $ids = $query->execute();
    /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
    foreach (\Drupal::entityTypeManager()->getStorage('paragraph')->loadMultiple($ids) as $paragraph) {
      $behavior_settings = $paragraph->getAllBehaviorSettings();
      $save = FALSE;

      // Fix for main layout options.
      if (isset($behavior_settings['layout_paragraphs']['config']['layout'][$id])) {
        $old_settings = $behavior_settings['layout_paragraphs']['config']['layout'][$id];
        $new_settings = _style_options_num2assoc_update_keys($old_settings, $key_map);
        if ($old_settings != $new_settings) {
          $behavior_settings['layout_paragraphs']['config']['layout'][$id] = $new_settings;
          // @todo Translations? QA with Denison to confirm working as expected.
          $save = TRUE;
        }
      }

      // Fix for regions.
      if (!empty($behavior_settings['layout_paragraphs']['config']['regions'])) {
        // @todo Fix for regions.
        foreach ($behavior_settings['layout_paragraphs']['config']['regions'] as $region => $settings) {
          if (!empty($settings[$id])) {
            $plugin = key($settings[$id]);
            if (!empty($settings[$id][$plugin])) {
              $old_settings = $settings[$id];
              $new_settings = _style_options_num2assoc_update_keys($old_settings, $key_map);
              if ($old_settings != $new_settings) {
                $behavior_settings['layout_paragraphs']['config']['regions'][$region][$id] = $new_settings;
                // @todo Translations? QA with Denison to confirm working as expected.
                $save = TRUE;
              }
            }
          }
        }
      }

      // Fix for paragraph styles.
      if (!empty($behavior_settings['style_options'][$id])) {
        $old_settings = $behavior_settings['style_options'][$id];
        $new_settings = _style_options_num2assoc_update_keys($old_settings, $key_map);
        if ($old_settings != $new_settings) {
          $behavior_settings['style_options'][$id] = $new_settings;
          // @todo Translations? QA with Denison to confirm working as expected.
          $save = TRUE;
        }
      }

      if ($save) {
        $paragraph->setAllBehaviorSettings($behavior_settings);
        $paragraph->save();
      }

    }
  }
}

/**
 * Update the keys of the style options array.
 *
 * @param array $array
 *   The style options array.
 * @param array $key_map
 *   The key map.
 *
 * @return array
 *  The updated style options array.
 */
function _style_options_num2assoc_update_keys($array, $key_map) {
  $plugin = key($array);
  $options = $array[$plugin];
  $new_options = [];
  foreach ($options as $key => $value) {
    if (is_numeric($key) && isset($key_map[$key])) {
      $new_options[$key_map[$key]] = $key_map[$key];
    }
    else {
      $new_options[$key] = $value;
    }
  }
  return [$plugin => $new_options];
}
